# ===============================================================================
# CRUVZ STREAMING - PRODUCTION DOCKER COMPOSE FOR 1000+ USERS
# Optimized PostgreSQL setup with Redis caching and horizontal scaling
# ===============================================================================

services:
  # ================================
  # POSTGRESQL DATABASE
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: cruvz-postgres-prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: cruvzdb
      POSTGRES_USER: cruvz
      POSTGRES_PASSWORD: cruvzSRT91
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./data/postgres-backups:/backups
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: [
      "postgres",
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=4MB",
      "-c", "min_wal_size=1GB",
      "-c", "max_wal_size=4GB",
      "-c", "max_worker_processes=8",
      "-c", "max_parallel_workers_per_gather=4",
      "-c", "max_parallel_workers=8",
      "-c", "max_parallel_maintenance_workers=4"
    ]
    networks:
      - cruvz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cruvz -d cruvzdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true

  # ================================
  # REDIS CACHE
  # ================================
  redis:
    image: redis:7.2-alpine
    container_name: cruvz-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./monitoring/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - cruvz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  # ================================
  # BACKEND API SERVER (SCALED)
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: cruvz-backend-prod
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./data/logs/backend:/app/logs
      - ./data/uploads:/app/uploads
      - ./.env.production:/app/.env:ro
    environment:
      - NODE_ENV=production
      - PORT=5000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=cruvz
      - POSTGRES_PASSWORD=cruvzSRT91
      - POSTGRES_DB=cruvzdb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - LOG_LEVEL=info
      - ENABLE_CORS=true
      - ENABLE_HELMET=true
      - ENABLE_RATE_LIMITING=true
      - MAX_CONCURRENT_STREAMS=1000
      - MAX_VIEWERS_PER_STREAM=10000
      # No mock or SQLite config present!
    networks:
      - cruvz-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 25s
      timeout: 8s
      retries: 4
      start_period: 50s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true

  # ================================
  # CORE STREAMING ENGINE (ORIGIN)
  # ================================
  origin:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_MODE=production
    container_name: cruvz-origin
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "1935:1935"
      - "9999:9999/udp"
      - "3333:3333"
      - "8088:8088"
      - "8089:8089"
      - "10000-10100:10000-10100/udp"
    volumes:
      - ./configs:/opt/ovenmediaengine/bin/origin_conf:ro
      - ./data/recordings:/opt/ovenmediaengine/recordings
      - ./data/logs/origin:/opt/ovenmediaengine/logs
    environment:
      - OME_HOST_IP=0.0.0.0
      - OME_RTMP_PROV_PORT=1935
      - OME_SRT_PROV_PORT=9999
      - OME_WEBRTC_SIGNALLING_PORT=3333
      - OME_LLHLS_STREAM_PORT=8088
      - OME_LLHLS_STREAM_TLS_PORT=8089
      - OME_API_PORT=8080
      - OME_ACCESS_TOKEN=cruvz-production-api-token-2025
      - MAX_CONCURRENT_STREAMS=1000
      - OME_WEBRTC_CANDIDATE_PORT=10000-10100
    networks:
      - cruvz-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/stats/current"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 75s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true

  # ================================
  # WEB APPLICATION (NGINX)
  # ================================
  web-app:
    image: nginx:alpine
    container_name: cruvz-web-app
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web-app:/usr/share/nginx/html:ro
      - ./web-app/server.conf:/etc/nginx/conf.d/default.conf:ro
    environment:
      - BACKEND_API_URL=http://backend:5000
      - ENVIRONMENT=production
    networks:
      - cruvz-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://127.0.0.1:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # ================================
  # MONITORING - PROMETHEUS
  # ================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: cruvz-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--query.max-concurrency=20'
      - '--storage.tsdb.wal-compression'
    networks:
      - cruvz-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  # ================================
  # MONITORING - GRAFANA
  # ================================
  grafana:
    image: grafana/grafana-oss:10.2.2
    container_name: cruvz-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./data/logs/grafana:/var/log/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=cruvz123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_LEVEL=warn
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES=false
    networks:
      - cruvz-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # ================================
  # METRICS EXPORTER
  # ================================
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: cruvz-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    networks:
      - cruvz-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # ================================
  # LOG AGGREGATION
  # ================================
  log-aggregator:
    image: fluent/fluent-bit:2.2.0
    container_name: cruvz-logs
    restart: unless-stopped
    volumes:
      - ./data/logs:/var/log:ro
      - ./monitoring/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - cruvz-network
    depends_on:
      - backend
      - origin
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

# ================================
# NETWORKS
# ================================
networks:
  cruvz-network:
    name: cruvz-production
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: cruvz-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

# ================================
# VOLUMES
# ================================
volumes:
  postgres-data:
    driver: local
    name: cruvz-postgres-data
  prometheus-data:
    driver: local
    name: cruvz-prometheus-data
  grafana-data:
    driver: local
    name: cruvz-grafana-data
  redis-data:
    driver: local
    name: cruvz-redis-data
