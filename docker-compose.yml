# Cruvz Streaming Production Docker Compose
# Six Sigma Zero-Error Deployment
# Complete production-ready configuration with backend API

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cruvz-streaming-backend
    restart: always

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

    ports:
    - "5000:5000"     # Backend API

    environment:
    - NODE_ENV=production
    - PORT=5000
    - DATABASE_URL=./data/cruvz_streaming.db
    - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-change-this}
    - JWT_EXPIRES_IN=24h
    - OME_HOST=origin
    - OME_PORT=3333
    - FRONTEND_URL=http://localhost

    volumes:
    - backend-data:/app/data:rw
    - backend-logs:/app/logs:rw
    - backend-uploads:/app/uploads:rw
    - backend-recordings:/app/recordings:rw

    networks:
    - cruvz-network

    labels:
    - "com.cruvz.service=backend"
    - "com.cruvz.six_sigma=enabled"
    - "com.cruvz.component=api"

  # Web Application Service
  web-app:
    image: nginx:alpine
    container_name: cruvz-streaming-webapp
    restart: always
    depends_on:
      backend:
        condition: service_healthy

    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

    ports:
    - "80:80"         # Web Application

    volumes:
    - ./web-app:/usr/share/nginx/html:ro
    - ./web-app/nginx.conf:/etc/nginx/conf.d/default.conf:ro

    networks:
    - cruvz-network

    labels:
    - "com.cruvz.service=webapp"
    - "com.cruvz.six_sigma=enabled"
    - "com.cruvz.component=frontend"

  origin:
    # Use stable base image to avoid build issues
    image: airensoft/ovenmediaengine:latest
    container_name: cruvz-streaming-origin
    restart: always

    # Enhanced health check
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f OvenMediaEngine > /dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

    # Resource management
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

    # Production port mapping
    ports:
    - "9000:9000"     # OVT(Origin) - Core streaming protocol
    - "1935:1935"     # RTMP Provider - Legacy streaming
    - "9999:9999/udp"     # SRT - Secure Reliable Transport  
    - "3333:3333"     # WebRTC Signaling / LLHLS - Primary streaming
    - "3334:3334"     # TLS WebRTC Signaling / LLHLS - Secure streaming
    - "3478:3478"     # WebRTC TURN - NAT traversal
    - "10000-10004:10000-10004/udp" # WebRTC Candidate - RTP/RTCP
    - "8080:8080"     # Health check endpoint - Monitoring

    # Production environment configuration
    environment:
    - OME_HOST_IP=localhost
    - OME_ORIGIN_PORT=9000
    - OME_RTMP_PROV_PORT=1935
    - OME_SRT_PROV_PORT=9999
    - OME_LLHLS_STREAM_PORT=3333
    - OME_WEBRTC_SIGNALLING_PORT=3333
    - OME_WEBRTC_SIGNALLING_TLS_PORT=3334
    - OME_WEBRTC_TCP_RELAY_PORT=3478
    - OME_WEBRTC_CANDIDATE_PORT=10000-10004/udp
    - LOG_LEVEL=INFO
    - SIX_SIGMA_MODE=true

    # Persistent storage
    volumes:
    - cs-origin-conf:/opt/ovenmediaengine/bin/origin_conf:rw
    - cs-logs:/opt/ovenmediaengine/logs:rw
    - cs-metrics:/opt/ovenmediaengine/metrics:rw
    # Mount Cruvz configurations if available
    - ./misc/conf_examples/Origin.xml:/opt/ovenmediaengine/bin/origin_conf/Server.xml:ro
    - ./misc/conf_examples/Logger.xml:/opt/ovenmediaengine/bin/origin_conf/Logger.xml:ro

    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
        labels: "service=cruvz-streaming-origin,environment=production,six_sigma=true"

    networks:
    - cruvz-network

    labels:
    - "com.cruvz.service=origin"
    - "com.cruvz.six_sigma=enabled"
    - "com.cruvz.monitoring=prometheus"
    - "com.cruvz.environment=production"

  # Six Sigma Monitoring Service
  monitoring:
    image: prom/prometheus:latest
    container_name: cruvz-monitoring
    restart: always

    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

    ports:
    - "9090:9090"

    volumes:
    - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - ./monitoring/rules:/etc/prometheus/rules:ro
    - prometheus-data:/prometheus:rw

    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--web.console.libraries=/etc/prometheus/console_libraries'
    - '--web.console.templates=/etc/prometheus/consoles'
    - '--storage.tsdb.retention.time=30d'
    - '--web.enable-lifecycle'
    - '--web.enable-admin-api'
    - '--query.max-concurrency=20'

    networks:
    - cruvz-network

    labels:
    - "com.cruvz.service=monitoring"
    - "com.cruvz.six_sigma=enabled"
    - "com.cruvz.component=prometheus"

  # Six Sigma Dashboard Service
  grafana:
    image: grafana/grafana:latest
    container_name: cruvz-dashboard
    restart: always
    depends_on:
      monitoring:
        condition: service_healthy

    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

    ports:
    - "3000:3000"

    environment:
    - GF_SECURITY_ADMIN_PASSWORD=cruvz123
    - GF_USERS_ALLOW_SIGN_UP=false
    - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/six-sigma-overview.json

    volumes:
    - grafana-data:/var/lib/grafana:rw
    - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro

    networks:
    - cruvz-network

    labels:
    - "com.cruvz.service=dashboard"
    - "com.cruvz.six_sigma=enabled"
    - "com.cruvz.component=grafana"

# Six Sigma Persistent Volumes
volumes:
  backend-data:
    driver: local
  backend-logs:
    driver: local
  backend-uploads:
    driver: local
  backend-recordings:
    driver: local
  cs-origin-conf:
    driver: local
  cs-logs:
    driver: local
  cs-metrics:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Six Sigma Network Configuration
networks:
  cruvz-network:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 172.20.0.0/16
        gateway: 172.20.0.1
    driver_opts:
      com.docker.network.enable_ipv6: "false"
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
