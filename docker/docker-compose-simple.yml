# Cruvz Streaming Simple Docker Compose - Infrastructure Test
# This configuration tests the deployment infrastructure with known-good images
# Use this to validate the deployment process works before building from source

services:
  # Use the upstream image for testing infrastructure
  origin:
    image: airensoft/ovenmediaengine:latest
    container_name: cruvz-streaming-origin
    restart: always

    healthcheck:
      test: ["CMD-SHELL", "pgrep -f OvenMediaEngine > /dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

    ports:
    - "9000:9000/tcp"     # OVT(Origin)
    - "1935:1935/tcp"     # RTMP Provider
    - "9999:9999/udp"     # SRT
    - "3333:3333/tcp"     # WebRTC Signaling / LLHLS
    - "3334:3334/tcp"     # TLS WebRTC Signaling / LLHLS
    - "3478:3478/tcp"     # WebRTC TURN
    - "10000-10004:10000-10004/udp" # WebRTC Candidate

    environment:
    - OME_HOST_IP=localhost
    - OME_ORIGIN_PORT=9000
    - OME_RTMP_PROV_PORT=1935
    - OME_SRT_PROV_PORT=9999
    - OME_LLHLS_STREAM_PORT=3333

    volumes:
    - cs-origin-conf:/opt/ovenmediaengine/bin/origin_conf:rw
    - cs-logs:/opt/ovenmediaengine/logs:rw

    networks:
    - cruvz-streaming-network

    labels:
    - "com.cruvz.service=origin"
    - "com.cruvz.deployment=simple"

  # Monitoring Service - Prometheus  
  monitoring:
    image: prom/prometheus:latest
    container_name: cruvz-monitoring
    restart: always

    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    ports:
    - "9090:9090/tcp"

    volumes:
    - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - prometheus-data:/prometheus:rw

    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--storage.tsdb.retention.time=7d'
    - '--web.enable-lifecycle'

    networks:
    - cruvz-streaming-network

  # Dashboard Service - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: cruvz-dashboard
    restart: always
    depends_on:
      monitoring:
        condition: service_healthy

    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    ports:
    - "3000:3000/tcp"

    environment:
    - GF_SECURITY_ADMIN_PASSWORD=cruvz123
    - GF_USERS_ALLOW_SIGN_UP=false

    volumes:
    - grafana-data:/var/lib/grafana:rw
    - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro

    networks:
    - cruvz-streaming-network

volumes:
  cs-origin-conf:
    driver: local
  cs-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  cruvz-streaming-network:
    driver: bridge